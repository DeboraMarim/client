import { useRef, useState, useCallback, useEffect } from 'react';

/**
 * useOutsideClick is a custom hook that provides a way to detect if a click event occurred outside of an element.
 *
 * @param {UseOutsideClickProps} props - an object that contains the callback function that will be called when a click outside of the element is detected
 *
 * @returns {[boolean, React.MutableRefObject<T | null>]} - a tuple that contains a boolean indicating whether a click outside the element has been detected and a ref object that can be used to reference the element that the hook is used in.
 *
 * @example
 *
 * const MyComponent = () => {
 *  const [isClickedOutside, ref] = useOutsideClick<HTMLDivElement>({
 *    callback: () => console.log('clicked outside'),
 *  });
 *
 *  return (
 *    <>
 *      <div ref={ref}>Click outside of me</div>
 *      {isClickedOutside && <div>clicked outside</div>}
 *    </>
 *  );
 * };
 */
function useOutsideClick(_a) {
    var callback = _a.callback;
    var ref = useRef(null);
    var _b = useState(false), isClickedOutside = _b[0], setIsClickedOutside = _b[1];
    var handleClick = useCallback(function (event) {
        if (ref.current && !ref.current.contains(event.target)) {
            callback();
            setIsClickedOutside(true);
        }
        else {
            setIsClickedOutside(false);
        }
    }, [callback]);
    useEffect(function () {
        document.addEventListener("mousedown", handleClick);
        return function () {
            document.removeEventListener("mousedown", handleClick);
        };
    }, [handleClick]);
    return [isClickedOutside, ref];
}

export { useOutsideClick };
//# sourceMappingURL=index.js.map
