/// <reference types="react" />
interface UseOutsideClickProps<T extends HTMLElement> {
    callback: () => void;
}
/**
 * useOutsideClick is a custom hook that provides a way to detect if a click event occurred outside of an element.
 *
 * @param {UseOutsideClickProps} props - an object that contains the callback function that will be called when a click outside of the element is detected
 *
 * @returns {[boolean, React.MutableRefObject<T | null>]} - a tuple that contains a boolean indicating whether a click outside the element has been detected and a ref object that can be used to reference the element that the hook is used in.
 *
 * @example
 *
 * const MyComponent = () => {
 *  const [isClickedOutside, ref] = useOutsideClick<HTMLDivElement>({
 *    callback: () => console.log('clicked outside'),
 *  });
 *
 *  return (
 *    <>
 *      <div ref={ref}>Click outside of me</div>
 *      {isClickedOutside && <div>clicked outside</div>}
 *    </>
 *  );
 * };
 */
declare function useOutsideClick<T extends HTMLElement>({ callback, }: UseOutsideClickProps<T>): [boolean, React.MutableRefObject<T | null>];

export { useOutsideClick };
